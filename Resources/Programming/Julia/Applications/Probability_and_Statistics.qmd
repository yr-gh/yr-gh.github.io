---
title: "Probability and Statistics"
author: "Rui Yang"
date: "01/05/2024"
format:
  html:
    toc: true
    toc-depth: 6
    toc-location: left
    number-sections: true
    number-depth: 6
jupyter: julia-1.9
---

## Pseudorandom number generation

For pseudorandom number generation, there is some deterministic (non-random and well defined) sequence $\{x_n\}$, specified by

$$
x_{n+1} = f(x_n, x_{n-1}, ...)
$$

originating from some specified *seed* $x_0$. The mathematical function $f(\cdot)$ is designed to yield desirable properties for the sequence $\{x_n\}$ that make it appear random.

Those properties include:

1.  Elements $x_i$ and $x_j$ for $i \neq j$ should appear statistically independent. That is, knowing the value of $x_i$ should not yield any information about the value $x_j$.

2.  The distribution of $\{x_n\}$ should appear uniform. That is, there shouldn't be values (or ranges of values) where elements of $\{x_n\}$ occur more frequently than others.

3.  The range covered by $\{x_n\}$ should be well defined.

4.  The sequence should repeat itself as rarely as possible.

In Julia, the main player for pseudorandom number generation is the function `rand()`, which generates a random number in each call without giving any arguments once a seed is set (it is usually set to the current time by default). You can set the seed yourself by using the `Random.seed!()` function from the Random package.

```{julia}
using Random

Random.seed!(2023)
println("Seed 2023: ", rand(), "\t", rand(), "\t", rand())
Random.seed!(2024)
println("Seed 2024: ", rand(), "\t", rand(), "\t", rand())
Random.seed!(2023)
println("Seed 2023: ", rand(), "\t", rand(), "\t", rand())
```

As can be seen from the output, setting the same seed will generate the same sequence.

### Creating a simple pseudorandom number generator

Here, we create a *Linear Congruential Generator* (LCG). The function $f(\cdot)$ used here is just a linear transformation modulo $m$: $x_{n+1} = (ax_n + c) \mod m$.

Here, we pick $m = 2^{32}$, $a = 69069$, $c = 1$, which yields sensible performance.

```{julia}
using DataFrames, AlgebraOfGraphics, CairoMakie

a, c, m = 69069, 1, 2^32
next(x) = (a*x + c) % m

N = 10^6
vec = Array{Float64, 1}(undef, N)

x = 2024  # Seed
for i in 1:N
    global x = next(x)
    vec[i] = x/m  # Scale x to [0, 1]
end
df = DataFrame(x = 1:N, y = vec)

fig = Figure()
p1 = data(first(df, 5000)) * mapping(:x, :y) * visual(Scatter, markersize = 3)
p2 = data(df) * mapping(:y) * visual(Hist, bins = 50, normalization = :pdf)
draw!(fig[1, 1], p1, axis = (xlabel = "n", ylabel = L"\mathbf{x_n}"))
draw!(fig[1, 2], p2, axis = (xlabel = "x", ylabel = "Density"))
fig
```

### More about Julia's pseudorandom number generator

In addition to `rand()`, we can also use `randn()` to generate **normally distributed** random numbers.

After invoking `using Random`, the following functions are available:

- `Random.seed!()`

- `randsubseq()`

- `randstring()`

- `randcycle()`

- `bitrand()`

- `randperm()` and `shuffle()` for permutations

In addition, in Julia, we can create an object representing a pseudorandom number generator implemented via a specified algorithm, for example, the *Mersenne Twister* pseudorandom number generator, which is considerably more complicated than the LCG described above. In Julia, we can create such an object of the *Mersenne Twister* pseudorandom number generator by calling `rng = MersenneTwister(seed)`, and then pass the `rng` to `rand()` to let it use the given pseudorandom number generator to generate pseudorandom numbers.

## Monte Carlo simulation

The core idea of Monte Carlo simulation lies in building a mathematical relationship between an unknown quantity to be estimated and the probability of a certain event, which can be estimated by statistical sampling. Then, we can get an estimate of this unknown quantity.

We can use this idea to estimate the value of $\pi$.

```{julia}
using DataFrames, AlgebraOfGraphics, CairoMakie

line_df  = DataFrame(x = [0, 0, 1, 1, 0],
                     y = [0, 1, 1, 0, 0])

x = range(0, 1, length = 1000)
quarter_circle_df = DataFrame(x = x,
                              y = @. sqrt(1 - x^2))

rect = data(line_df) * mapping(:x, :y) * visual(Lines)
quarter_circle = data(quarter_circle_df) * mapping(:x, :y) * visual(Lines)
draw(rect + quarter_circle, axis = (limits = (0, nothing, 0, nothing),))
```

As can be seen from the above figure, we know:

1.  The area of the unit square is 1;

2.  The area of the first quadrant of the unit circle is $\pi / 4$;

3.  Then, if we randomly throw a ball within the unit square, the probability of the event that this ball falls into the area of the first quadrant of the unit circle is $\pi / 4$. Further, we know that the probability of this event can be estimated by its frequency if we repeat this experiment infinitely many times; therefore, we can estimate the value of $\pi$ by the following formula:

$$
\hat{\pi} = 4 \frac{\text{The number of times falling in }x^2 + y^2 \leq 1}{\text{Total number of times}}
$$

```{julia}
using Random, LinearAlgebra, AlgebraOfGraphics, CairoMakie, DataFrames

Random.seed!(1234)

N = 10^5
df = DataFrame([(x = rand(), y = rand()) for _ in 1:N])
transform!(df, [:x, :y] => ByRow((x, y) -> ifelse(norm([x, y]) <= 1, "in", "out")) => :flag)
pi_estimate = 4 * count(df.flag .== "in") / N
println("Ï€ estimate: ", pi_estimate)

fig = Figure()
p = data(df) * mapping(:x, :y, color = :flag) * visual(Scatter, markersize = 1)
draw!(fig, p, axis = (limits = (0, nothing, 0, nothing),))
fig
```

## Appendices

### Base conversions